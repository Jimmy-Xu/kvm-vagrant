---
- name: solve ssh slow
  copy: src=etc/ssh/sshd_config dest=/etc/ssh/sshd_config
  register: ssh_config
- name: restart sshd if sshd_config has changed
  when: ssh_config.changed
  shell: service sshd restart
- name: solve eth0 has no ip
  shell: (ps -ef | grep dhclient) && echo "dhclient is running" || dhclient

###### install common package ######
#add 163 yum repo
- name: backup CentOS-Base.repo
  command: mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
  args:
    creates: /etc/yum.repos.d/CentOS-Base.repo.backup

- name: download CentOS-Base.repo from 163
  copy:
    src: etc/yum.repos.d/CentOS7-Base-163.repo
    dest: /etc/yum.repos.d/CentOS-Base.repo

# config yum(fix: Failed to connect to 2605:9000:401:102::2: Network is unreachable\"\nhttp://mirror.centos.org/centos/7/cloud/x86_64/openstack-liberty/repodata/repomd.xml)
- name: copy fastestmirror.conf
  copy:
    src: etc/yum/pluginconf.d/fastestmirror.conf
    dest: /etc/yum/pluginconf.d/fastestmirror.conf
- name: copy yum.conf
  copy:
    src: etc/yum.conf
    dest: /etc/yum.conf

# add epel yum repo
- name: install epel-release
  yum:
    name: epel-release
    state: present

- name: enable epel
  shell: sed -i 's/enabled=0/enabled=1/g' /etc/yum.repos.d/epel.repo

# install common package
- name: install common package
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - wget
    - net-tools
    - python-pip
    - git
    - gcc
    - automake
    - autoconf
    - iptables
    - iptables-services
    - libvirt
    - psmisc

- name: upgrade pip
  shell: pip install --upgrade pip

#disable firewalld
- name: disalbe firewalld service
  service:
    name: firewalld
    state: stopped
    enabled: no

#start iptables
- name: start iptables service
  service:
    name: iptables
    state: started
    enabled: yes

#check iptables
- name: check iptables
  shell: iptables -F && iptables -X

#disable selinux
- name: disable selinux
  selinux: state=disabled

###### start shadowsocks sslcoal service(socks5 proxy) ######
- name: install shadowsocks
  pip:
    name: shadowsocks
    version: 2.8.2

- file:
    path: /etc/shadowsocks
    state: directory
    mode: 0755

- name: copy 'etc_shadowsocks_client.json' to '/etc/shadowsocks/client.json'
  template:
    src: etc/shadowsocks/client.json
    dest: /etc/shadowsocks/client.json
  tags:
   - config-shadowsocks

- name: add systemd config for sslocal
  copy:
    src: usr/lib/systemd/system/sslocal.service
    dest: /usr/lib/systemd/system/sslocal.service

- name: start sslocal service
  service:
    name: sslocal
    state: started
    enabled: yes

- name: install unit file for sslocal service
  copy:
    src: usr/lib/systemd/system/sslocal.service
    dest: /usr/lib/systemd/system/sslocal.service
  notify:
    - reload-systemd
    - restart-sslocal


###### start privoxy service(socks5 proxy -> http proxy) ######
- name: install privoxy
  yum:
    name: privoxy
    state: present

- name: start privoxy service
  service:
    name: privoxy
    state: started
    enabled: yes

- name: config privoxy
  copy:
    src: etc/privoxy/config
    dest: /etc/privoxy/config
  notify:
    - restart-privoxy

###### proxychains-ng(use proxy for any command) ######
- name: install proxychains-ng
  git:
    repo: https://github.com/rofl0r/proxychains-ng.git
    dest: /root/proxychains-ng
    version: master
    accept_hostkey: yes
  environment: "{{ proxy_env }}"
- name: build proxychains-ng
  shell: ./configure –prefix=/usr –sysconfdir=/etc && make && make install && ln -s /usr/local/bin/proxychains4 /bin/proxychains4
  args:
    chdir: /root/proxychains-ng/
    creates: /bin/proxychains4

- name: config proxychains-ng
  copy:
    src: usr/local/etc/proxychains.conf
    dest: /usr/local/etc/proxychains.conf

##### mount disk #####
- name: create a xfs filesystem on /dev/vdb and /dev/vdc.
  filesystem:
    fstype: xfs
    dev: "{{ item }}"
  with_items:
    - /dev/vdb
    - /dev/vdc
- name: ensure mount point /mnt/vdb and /mnt/vdc
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /mnt/vdb
    - /mnt/vdc
- name: mount device(/dev/vdb)
  mount:
    path: /mnt/vdb
    src: /dev/vdb
    fstype: xfs
    state: mounted # add to /etc/fstab + mount
- name: mount device(/dev/vdc)
  mount:
    path: /mnt/vdc
    src: /dev/vdc
    fstype: xfs
    state: mounted

###### init ######
- name: generate h8s_deploy_env
  shell: echo -e "HOSTNAME='h8s-single'\nIF_NAME='eth0'\nIF_IP='{{ ansible_eth0.ipv4.address }}'\nKEYSTONE_ADMIN_PW='$(uuidgen)'\nKEYSTONE_DEMO_PW='$(uuidgen)'\nRBD_SECRET_UUID='$(uuidgen)'" > /root/h8s_deploy_env
  args:
    creates: /root/h8s_deploy_env


# # set ssh
# - file: path=/root/.ssh state=directory mode=0755
# - name: set ssh keypair
#   copy:
#     src: ssh/{{ item }}
#     dest: /root/.ssh/
#   with_items:
#     - id_rsa
#     - id_rsa.pub
#     - config
# - file:
#     path: /root/.ssh/id_rsa
#     owner: root
#     group: root
#     mode: 0400

#
# ###### clone devops ######
# # this is a private git repo, need add deploy key(example: deploy-for-dev-redadonly) in github with public keypair with "ssh/id_rsa.pub"
# - name: check /root/devops
#   shell: ls /root/devops/* | wc -l
#   register: devops_downloaded
# - debug: msg={{ devops_downloaded.stdout }}
#
# - name: set deploy key for github
#   copy:
#     src: github/deploy.pem
#     dest: /root/.ssh/deploy.pem
# - file:
#     path: /root/.ssh/deploy.pem
#     owner: root
#     group: root
#     mode: 0400
#
# - git: repo=git@github.com:getdvm/devops.git dest=/root/devops version=master accept_hostkey=yes key_file=/root/.ssh/deploy.pem
#   environment: "{{ proxy_env }}"
#   when: devops_downloaded.stdout == "0"
#
# # git config
# - name: change git config
#   command: git config core.filemode false
#   args:
#     chdir: /root/devops/
#
# - name: add -x filemode to shell script
#   shell: ls /root/devops/hypernetes-single-node/*.sh
#   register: sh_files
# - debug: msg={{ sh_files.stdout_lines }}
#
# - file: path={{ item }} owner=root group=root mode=755
#   with_items: sh_files.stdout_lines
