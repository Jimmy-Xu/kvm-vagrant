---
## show env
- debug: msg="{{ proxy_env }}"

#set hostname( config.vm.hostname in Vagrantfile)
# - name: set hostname
#   hostname: name="{{ h8s_hostname }}"

## patch for ssh
- name: solve ssh slow
  copy: src=etc/ssh/sshd_config dest=/etc/ssh/sshd_config
  register: ssh_config
- name: restart sshd if sshd_config has changed
  when: ssh_config.changed
  service:
    name: sshd
    state: restarted
    enabled: true

## ssh client config
- name: ensure .ssh dir
  shell: mkdir -p /root/.ssh /home/vagrant/.ssh
- name: ssh client config
  copy: src=ssh/config dest=/root/.ssh/config
- name: ssh client config
  copy: src=ssh/config dest=/home/vagrant/.ssh/config


## patch for dhcp
- name: solve ip lost after dhcp timeout
  shell: (ps -ef | grep dhclient | grep -v grep) && echo 'dhclient is running' || dhclient eth0
- name: dhclient crontjob
  cron:
    minute: "*/20"
    user: root
    job: "/bin/bash -c '(ps -ef | grep dhclient | grep -v grep) && echo dhclient is running || /sbin/dhclient eth0'"
    cron_file: ansible_dhclient-autorenew

# - name: ping crontjob
#   cron:
#     minute: "*/1"
#     user: root
#     job: "/bin/bash -c '/bin/pkill ping; /bin/ping -c15 -W1 {{ virbr1_ip }}'"
#     cron_file: ansible_ping_host

#disable selinux
- name: disable selinux
  selinux: state=disabled

# #disable ipv6
# - name: disable ipv6 config
#   copy:
#     src: etc/sysctl.conf
#     dest: /etc/sysctl.conf
# - name: take effect for sysctl
#   shell: sysctl -p
#
# - name: disable ipv6 runtime
#   shell: |
#     echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
#     echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6

## for openstack
- name: Disable NetworkManager & firewalld Service
  service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  with_items:
    - NetworkManager
    - firewalld
- name: Enable network
  service:
    name: network
    state: started
    enabled: true

- name: set eth1 ip
  template:
    src: etc/sysconfig/network-scripts/ifcfg-eth1
    dest: /etc/sysconfig/network-scripts/ifcfg-eth1
  notify:
    - restart-network

# append dns server 114.114.114.114
- name: create /etc/resolv.conf.d dir
  file:
    path: /etc/resolv.conf.d
    state: directory
- name: config dns
  copy:
    src: etc/resolv.conf.d/base
    dest: /etc/resolv.conf.d/base
- name: append dns to resolv.conf
  shell: grep 'nameserver 114.114.114.114' /etc/resolv.conf || echo 'nameserver 114.114.114.114' >> /etc/resolv.conf

# patch /var/log/message flooded with systemd messages
- name: config for rsyslog
  copy:
    src: etc/rsyslog.d/ignore-systemd-session-slice.conf
    dest: /etc/rsyslog.d/ignore-systemd-session-slice.conf
  notify:
    - restart-rsyslog


##########################################
- name: fix yum pending transactions
  shell: yum-complete-transaction --cleanup-only ; yum history redo last -y

## install yum repo: epel
- name: install yum repo for epel-release
  environment: "{{ proxy_env }}"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - epel-release

- name: update the repo to use HTTP rather than HTTPS
  shell: |
    sed -i "s/=https/=http/" /etc/yum.repos.d/epel.repo
    sed -i "s/^#baseurl=/baseurl=/" /etc/yum.repos.d/epel.repo
    sed -i "s/^mirrorlist=/#mirrorlist=/" /etc/yum.repos.d/epel.repo

- name: create /etc/yum.repos.d/bak dir
  file:
    path: /etc/yum.repos.d/bak
    state: directory
- name: move epel-testing.repo to /etc/yum.repos.d/bak
  shell: mv epel-testing.repo bak/epel-testing.repo && mv CentOS-{Debuginfo,Sources}.repo bak/
  args:
    chdir: /etc/yum.repos.d/
    creates: /etc/yum.repos.d/bak/epel-testing.repo

- name: install pip
  environment: "{{ proxy_env }}"
  yum:
    name: python-pip
    state: present
- name: upgrade pip
  shell: pip install --upgrade pip && touch /root/pip.upgraded
  args:
    creates: /root/pip.upgraded

###### start shadowsocks sslcoal service(socks5 proxy) ######
- name: install shadowsocks
  pip:
    name: shadowsocks
    version: 2.8.2

- name: create dir /etc/shadowsocks
  file:
    path: /etc/shadowsocks
    state: directory
    mode: 0755

- name: copy 'etc_shadowsocks_client.json' to '/etc/shadowsocks/client.json'
  template:
    src: etc/shadowsocks/client.json
    dest: /etc/shadowsocks/client.json
  tags:
   - config-shadowsocks

# add service:sslocal
- name: install unit file for sslocal service
  copy:
    src: usr/lib/systemd/system/sslocal.service
    dest: /usr/lib/systemd/system/sslocal.service
  notify:
    - reload-systemd
    - restart-sslocal

- name: start sslocal service
  service:
    name: sslocal
    state: started
    enabled: yes


###### start privoxy service(socks5 proxy -> http proxy) ######
- name: install privoxy
  environment: "{{ proxy_env }}"
  yum:
    name: privoxy
    state: present

- name: config privoxy
  copy:
    src: etc/privoxy/config
    dest: /etc/privoxy/config
  notify:
    - restart-privoxy

- name: start privoxy service
  service:
    name: privoxy
    state: started
    enabled: yes

## install basick package
- name: install basic package
  environment: "{{ proxy_env }}"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - wget
    - git
    - gcc
    - automake
    - autoconf
    - screen
    - multitail
    - xterm

- name: download proxychains-ng
  environment: "{{ proxy_env }}"
  shell: |
    wget -c http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64/proxychains-ng-4.11-1.sdl7.x86_64.rpm
    rpm -ivh proxychains-ng-4.11-1.sdl7.x86_64.rpm
  args:
    chdir: /root/
    creates: /bin/proxychains4
- name: config proxychains-ng
  copy:
    src: etc/proxychains.conf
    dest: /etc/proxychains.conf

######################################################
## install yum repo: centos-release-openstack-liberty
- name: install yum repo for centos-release-openstack-liberty
  environment: "{{ proxy_env }}"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - centos-release-openstack-liberty

## install yum repo: ceph
- name: add ceph yum repo
  copy: src=etc/yum.repos.d/ceph.repo dest=/etc/yum.repos.d/ceph.repo

## install yum repo: docker
- name: add docker yum repo
  copy: src=etc/yum.repos.d/docker-main.repo dest=/etc/yum.repos.d/docker-main.repo

######################################################
##### mount disk #####
- name: create a xfs filesystem on /dev/vdb and /dev/vdc.
  filesystem:
    fstype: xfs
    dev: "{{ item }}"
  with_items:
    - /dev/vdb
    - /dev/vdc
- name: ensure mount point /mnt/vdb and /mnt/vdc
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /mnt/vdb
    - /mnt/vdc
- name: mount device(/dev/vdb)
  mount:
    path: /mnt/vdb
    src: /dev/vdb
    fstype: xfs
    state: mounted # add to /etc/fstab + mount
- name: mount device(/dev/vdc)
  mount:
    path: /mnt/vdc
    src: /dev/vdc
    fstype: xfs
    state: mounted


### install common package ###
- name: install common package
  environment: "{{ proxy_env }}"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - net-tools
    - tree
    - psmisc

## install libvirt
- name: install libvirt package
  environment: "{{ proxy_env }}"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - libvirt

- name: copy script for virbr0
  copy: src={{ item }} dest=/root/ mode="0755"
  with_fileglob:
    - tools/*


# delete default virbr0 (192.168.121.1)
- name: delete default virbr0
  shell: /root/destroy-default-virbr0.sh

# config libvirt
- name: copy libvirt config
  template:
    src: etc/libvirt/qemu/networks/default.xml
    dest: /etc/libvirt/qemu/networks/default.xml
  notify:
    - restart-libvirtd


# start libvirtd service
- name: start libvirtd service
  service:
    name: libvirtd
    state: started
    enabled: yes


## install iptables
- name: install iptables package
  environment: "{{ proxy_env }}"
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - iptables
    - iptables-services

- name: start iptables service
  service:
    name: iptables
    state: started
    enabled: true

#check iptables
- name: check iptables
  shell: iptables -F && iptables -X


###### init ######
- name: generate h8s_deploy_env
  shell: echo -e "HOSTNAME='h8s-single'\nIF_NAME='eth1'\nIF_IP='{{ ansible_eth1.ipv4.address }}'\nKEYSTONE_ADMIN_PW='$(uuidgen)'\nKEYSTONE_DEMO_PW='$(uuidgen)'\nRBD_SECRET_UUID='$(uuidgen)'" > /root/h8s_deploy_env
  args:
    creates: /root/h8s_deploy_env


# # set ssh
# - file: path=/root/.ssh state=directory mode=0755
# - name: set ssh keypair
#   copy:
#     src: ssh/{{ item }}
#     dest: /root/.ssh/
#   with_items:
#     - id_rsa
#     - id_rsa.pub
#     - config
# - file:
#     path: /root/.ssh/id_rsa
#     owner: root
#     group: root
#     mode: 0400

#
# ###### clone devops ######
# # this is a private git repo, need add deploy key(example: deploy-for-dev-redadonly) in github with public keypair with "ssh/id_rsa.pub"
# - name: check /root/devops
#   shell: ls /root/devops/* | wc -l
#   register: devops_downloaded
# - debug: msg={{ devops_downloaded.stdout }}
#
# - name: set deploy key for github
#   copy:
#     src: github/deploy.pem
#     dest: /root/.ssh/deploy.pem
# - file:
#     path: /root/.ssh/deploy.pem
#     owner: root
#     group: root
#     mode: 0400
#
# - git: repo=git@github.com:getdvm/devops.git dest=/root/devops version=master accept_hostkey=yes key_file=/root/.ssh/deploy.pem
#   environment: "{{ proxy_env }}"
#   when: devops_downloaded.stdout == "0"
#
# # git config
# - name: change git config
#   command: git config core.filemode false
#   args:
#     chdir: /root/devops/
#
# - name: add -x filemode to shell script
#   shell: ls /root/devops/hypernetes-single-node/*.sh
#   register: sh_files
# - debug: msg={{ sh_files.stdout_lines }}
#
# - file: path={{ item }} owner=root group=root mode=755
#   with_items: sh_files.stdout_lines
