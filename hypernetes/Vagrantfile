# -*- mode: ruby -*-
# vi: set ft=ruby :

##############################
# Add timestamp to debug log
##############################
$out_file = File.new('debug.log', 'w')
def $stdout.write string
    log_datas=string
    if log_datas.gsub(/\r?\n/, "") != ''
        log_datas=::Time.now.strftime("%d/%m/%Y %T")+" "+log_datas.gsub(/\r\n/, "\n")
    end
    super log_datas
    $out_file.write log_datas
    $out_file.flush
end
def $stderr.write string
    log_datas=string
    if log_datas.gsub(/\r?\n/, "") != ''
        log_datas=::Time.now.strftime("%d/%m/%Y %T")+" "+log_datas.gsub(/\r\n/, "\n")
    end
    super log_datas
    $out_file.write log_datas
    $out_file.flush
end

require 'yaml'
VAGRANTFILE_API_VERSION = '2'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"
  config.vm.hostname = "h8s-single"
  config.vm.post_up_message = "========== Start up! =========="

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network "forwarded_port", id: "ssh", guest: 22, host: 2222, auto_correct: true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  eth1_ip = "192.168.121.9"
  config.vm.network "private_network", ip: eth1_ip, :bridge => 'virbr1'

  # REF: https://www.vagrantup.com/docs/vagrantfile/ssh_settings.html
  config.ssh.port = 22
  config.ssh.keep_alive = true

  # config config.ssh.host
  config.vm.networks.each do |type, options|
    if type == :private_network
      puts "==network_type==: #{type} #{options}"
      check_ip = %Q(ping -c3 -W1 #{eth1_ip})
      output = `#{check_ip}`
      if $?.to_i == 0
        config.ssh.host = eth1_ip  # ssh to VM via static ip,
                                   # use `ssh-keygen -R 192.168.121.9` to remove cached key in ~/.ssh/known_hosts in host os
        puts "== config.ssh.host == : (use eth1 - static ip)", config.ssh.host
      else
        puts "== config.ssh.host == : (use eth0 - dhcp)"
      end
    end
  end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network "public_network"
  #config.vm.network "public_network", ip: "192.168.121.9", :bridge => 'virbr0', :dev => 'eno1'

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  # Libvirt
  config.vm.provider :libvirt do |lv|
    lv.memory = 8192
    lv.cpus = 4
    #lv.cpu_mode = "host-model"
    # Enable KVM nested virtualization
    lv.nested = true
    lv.graphics_ip = '0.0.0.0'

    lv.nic_model_type = "virtio"
    ######################################################################################
    ## create storage pool
    # sudo mkdir /var/lib/libvirt/hypernetes
    # sudo virsh pool-create-as hypernetes --type dir --target /var/lib/libvirt/hypernetes
    # sudo virsh pool-list
    ######################################################################################
    lv.storage_pool_name = "hypernetes"
    # add disk(run `vagrant reload` after add disk, stored in /var/lib/libvirt/images)
    lv.storage :file, :device => "sdb", :path => "hypernetes_sdb.disk", :size => '40G', :bus => "virtio"
    lv.storage :file, :device => "sdc", :path => "hypernetes_sdc.disk", :size => '60G', :bus => "virtio"
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "site.yml"
    ansible.verbose = "v"
  end
end
