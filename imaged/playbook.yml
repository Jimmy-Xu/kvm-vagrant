---
- hosts: all
  sudo: true
  vars:
    proxy_env:
      http_proxy: http://127.0.0.1:8118
      https_proxy: https://127.0.0.1:8118
  tasks:
    ###### install common package ######
    - name: check CentOS-Base.repo
      stat: path=/etc/yum.repos.d/CentOS-Base.repo.backup
      register: orig_centos_base_repo
    - name: backup CentOS-Base.repo
      command: mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
      when: orig_centos_base_repo.stat.exists == False
    - name: download CentOS-Base.repo from 163
      get_url: url=http://mirrors.163.com/.help/CentOS7-Base-163.repo dest=/etc/yum.repos.d/CentOS-Base.repo
    - name: install epel-release
      yum:
        name: epel-release
        state: present
    - name: install common package
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - wget
        - net-tools
        - python-pip
        - libvirt
        - git
        - jq

    ###### install mongo client ######
    - name: add mongo yum repo
      copy: src=etc/yum.repos.d/mongodb.repo dest=/etc/yum.repos.d/mongodb.repo
    - name: install mongo client
      yum:
        name: mongodb-org-shell
        state: present

    ###### install ceph client ######
    - name: add ceph yum repo
      copy: src=etc/yum.repos.d/ceph.repo dest=/etc/yum.repos.d/ceph.repo
    - name: install ceph client
      yum:
        name: ceph-common
        state: present

    ###### start shadowsocks sslcoal service(socks5 proxy) ######
    - name: install shadowsocks
      pip:
        name: shadowsocks
        version: 2.8.2
    - file: path=/etc/shadowsocks state=directory mode=0755
    - name: config shadowsocks
      copy: src=etc/shadowsocks/client.json dest=/etc/shadowsocks/client.json
    - name: install unit file for sslocal service
      copy: src=usr/lib/systemd/system/sslocal.service dest=/usr/lib/systemd/system/sslocal.service
      notify:
        - reload-systemd
    - name: reload-systemd
      sudo: yes
      command: systemctl daemon-reload
    - name: start sslocal service
      service: name=sslocal state=started enabled=yes

    ###### start privoxy service(socks5 proxy -> http proxy) ######
    - name: install privoxy
      yum:
        name: privoxy
        state: present
    - name: config privoxy
      copy: src=etc/privoxy/config dest=/etc/privoxy/config
    - name: start privoxy service
      service: name=privoxy state=started enabled=yes

    ###### install image service ######
    - name: check image-service RPM
      stat: path=/root/imaged-0.5.0-1.el7.centos.x86_64.rpm
      register: imaged_rpm
    - name: download image-service RPM
      when: imaged_rpm.stat.exists == False
      get_url: url="{{ item }}" dest=/root
      environment: "{{ proxy_env }}"
      with_items:
        - http://hyper-imaged-dev.s3.amazonaws.com/qemu-hyper-2.4.1-2.el7.centos.x86_64.rpm
        - http://hyper-imaged-dev.s3.amazonaws.com/imaged-0.5.0-1.el7.centos.x86_64.rpm
    - name: install image-service
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - /root/qemu-hyper-2.4.1-2.el7.centos.x86_64.rpm
        - /root/imaged-0.5.0-1.el7.centos.x86_64.rpm

    ###### start docker daemon ######
    - name: add docker yum repo
      copy: src=etc/yum.repos.d/docker-main.repo dest=/etc/yum.repos.d/docker-main.repo
    - name: install docker
      yum:
        name: docker-engine
        state: present
    - name: config docker
      copy: src=etc/sysconfig/docker dest=/etc/sysconfig/docker
    - name: install unit file for docker service
      copy: src=usr/lib/systemd/system/docker.service dest=/usr/lib/systemd/system/docker.service
      notify:
        - reload-systemd
    - name: start docker service
      service: name=docker state=started enabled=yes
    - name: add user to docker group
      user: name=vagrant comment="default user" group=docker

    ###### pull docker image ######
    - name: install docker-py
      pip:
        name: docker-py
        state: present
    # pull mongo image
    - name: check mongo image
      shell: docker images | grep 'mongo.*3.2.3' | wc -l
      register: mongo_image
    - debug: msg={{ mongo_image.stdout }}
    - name: pull mongo image
      command: docker pull mongo:3.2.3
      when: mongo_image.stdout != "1"
    # pull ceph image
    - name: check ceph image
      shell: docker images | grep 'ceph.*demo' | wc -l
      register: ceph_image
    - debug: msg={{ ceph_image.stdout }}
    - name: pull ceph image
      command: docker pull ceph/demo
      when: ceph_image.stdout != "1"

    ###### start ceph server in container ######
    - git: repo=https://github.com/Jimmy-Xu/learn-ceph.git dest=/home/vagrant/learn-ceph version=master
      environment: "{{ proxy_env }}"
    - name: build xjimmyshcn/ceph image
      docker_image: path="/home/vagrant/learn-ceph/" name="xjimmyshcn/ceph" state=present
    - name: get the network prefix
      shell: ip route | grep eth0 | grep -v default | awk '{print $1}'
      register: network_prefix
    - debug: msg={{ network_prefix.stdout }}
    - name: start ceph container
      docker:
        name: ceph-demo
        image: xjimmyshcn/ceph
        state: reloaded
        net: host
        privileged: yes
        volumes:
          - /etc/ceph:/etc/ceph
          - /var/log/ceph:/var/log/ceph
          - /var/lib/ceph:/var/lib/ceph
          - /dev:/dev
          - /sys:/sys
        env:
          MON_IP: "{{ ansible_eth0.ipv4.address }}"
          CEPH_NETWORK: "{{ network_prefix.stdout }}"
    #create ceph pool 'hyper'
    - name: check pool
      shell: ceph osd pool ls | grep hyper | wc -l
      register: hyper_pool
    - debug: msg={{ hyper_pool.stdout }}
    - name: create ceph pool 'hyper'
      shell: ceph osd pool create hyper 64
      when: hyper_pool.stdout == "0"

    ###### start mongo server in container ######
    - name: start mongo container
      docker:
        name: imaged-mongo
        image: mongo:3.2.3
        state: reloaded
        volumes:
          - /var/lib/imaged/mongo:/data/db
        ports:
          - "27017:27017"

    ###### start image-service ######
    - name: config imaged
      copy: src=etc/imaged/config dest=/etc/imaged/config
    - name: start imaged
      service: name=imaged state=started enabled=yes
